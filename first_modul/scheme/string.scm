;; O(N)
(define (rev string)
  (list->string (reverse (string->list string))))

;; task 1 (O(N))
(define (string-trim-left string)
  (define (iter list)
    (cond ((null? list) '())
          ((or (eq? (car list) #\space)
               (eq? (car list) #\newline)
               (eq? (car list) #\tab)) (iter (cdr list)))
          (else list)))
  (let* ((list (string->list string))
         (ans (list->string (iter list))))
    ans))

;; task 2 (O(N))
(define (string-trim-right string)
  (let* ((rvs (rev string))
        (ans (rev (string-trim-left rvs))))
    ans))

;; task 3 (O(N))
(define (string-trim string)
  (string-trim-right (string-trim-left string)))

;; task 4 (O(N))
(define (string-prefix? a b)
  (define (iter check xs)
    (cond ((null? check) #t)
          ((null? xs) #f)
          ((eq? (car check) (car xs)) (iter (cdr check) (cdr xs)))
          (else #f)))
  (let ((check (string->list a))
        (xs (string->list b)))
    (iter check xs)))

;; task 5 (O(N))
(define (string-suffix? a b)
  (let ((check (rev a))
        (xs (rev b)))
    (string-prefix? check xs)))

;; task 6 (O(N))

(define (string-infix? a b)
  (define (iter check xs)
    (cond ((null? check) #t)
          ((null? xs) #f)
          ((> (length check) (length xs)) #f)
          ((equal? (list->string check)
                   (substring (list->string xs) 0 (length check))) #t)
          (else (iter check (cdr xs)))))
  (let ((check (string->list a))
        (xs (string->list b)))
    (iter check xs)))

;; task 7 (O(N))
(define (constr string substrs size)
  (cond ((null? substrs) '())
        ((null? (cdr substrs))
         (cons (substring string (car substrs) (length (string->list string))) '()))
        ((> (+ size (car substrs)) (length (string->list string)))
         (cons (substring string (car substrs) (length (string->list string))) '()))
        (else (cons (substring string (car substrs) (- (cadr substrs) size))
                    (constr string (cdr substrs) size)))))

(define (string-split str sep)
  (define (iter str sep idx size)
    (let ((string (list->string str))
          (len (length (string->list sep))))
      (cond ((null? str) (cons idx '()))
            ((> len (length str)) (cons idx '()))
            ((equal? sep (substring string 0 len))
             (cons idx (iter (string->list (substring string len (length str)))
                             sep
                             (+ idx size len)
                             0)))
            (else (iter (cdr str) sep idx (+ size 1))))))
  (let* ((list (string->list str))
         (substrs (iter list sep 0 0)))
    (constr str substrs (length (string->list sep)))))